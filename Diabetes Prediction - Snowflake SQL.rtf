{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 SELECT *\
FROM SNOWFLAKE_LEARNING_DB.ALIJRIZVI7_LOAD_SAMPLE_DATA_FROM_S3.DIABETES;\
\
-- Deleting the Old, Then-Newly-Added Categorical Column\
\
ALTER TABLE DIABETES DROP COLUMN BPCLASS;\
\
-- Adding the New Categorical Column with the Right Values\
\
ALTER TABLE DIABETES ADD COLUMN BPCLASS STRING;\
\
UPDATE DIABETES\
SET BPCLASS = CASE\
    WHEN BLOODPRESSURE >= 130 THEN 'High'\
    WHEN BLOODPRESSURE <= 80 THEN 'Low'\
    ELSE 'Normal'\
END;\
\
SELECT *\
FROM DIABETES\
LIMIT 10;\
\
-- Confirm BPCLASS Reading-in\
\
SELECT DISTINCT(BPCLASS)\
FROM DIABETES;\
\
SELECT COUNT(*)\
FROM DIABETES\
WHERE BLOODPRESSURE >= 130;\
\
-- Also adding a Categorical Column for BMI Levels\
\
ALTER TABLE DIABETES ADD COLUMN BMICLASS STRING;\
\
UPDATE DIABETES\
SET BMICLASS = CASE\
    WHEN BMI >= 30 THEN 'Obese'\
    WHEN BMI >= 25 AND BMI <= 29.9 THEN 'Overweight'\
    WHEN BMI >= 18.5 AND BMI <= 24.9 THEN 'Healthy Weight'\
    ELSE 'Underweight'\
END;\
\
SELECT BMICLASS, COUNT(*)\
FROM DIABETES\
GROUP BY BMICLASS;\
\
-- In each BP Class, how many people are in each BMI Class?\
\
SELECT *,\
    COUNT(*) OVER (PARTITION BY BPCLASS, BMICLASS) AS CLASSCOUNT\
FROM DIABETES;\
\
\
-- Analytics Using WINDOW Functions & Subqueries\
\
SELECT DISTINCT(BPCLASS),\
    ROUND(AVG(AGE) OVER (PARTITION BY BPCLASS), 2) AS AVGAGEBY_BPCLASS\
FROM DIABETES;\
\
SELECT DISTINCT(BMICLASS),\
    ROUND(AVG(AGE) OVER (PARTITION BY BMICLASS), 2) AS AVGAGEBY_BMICLASS\
FROM DIABETES;\
\
SELECT BMICLASS, AGE,\
    ROW_NUMBER() OVER (ORDER BY AGE DESC) AS AGE_RANK\
FROM DIABETES;\
\
SELECT BPCLASS, AGE,\
    RANK() OVER (ORDER BY AGE DESC) AS AGE_RANK\
FROM DIABETES;\
\
-- LEAD/LAG\
\
-- EXAMPLE: (However, this Dataset does not have Columns/Values which would be Optimal for LEAD/LAG functions,\
-- so I do not find it Useful to use any)\
\
-- SELECT country, year,\
--     population,\
--     LAG(population, 2) [Looks 2 Rows back] OVER (PARTITION BY country ORDER BY year ASC) AS PREVIOUS_YR_POP,\
--     LEAD(population) OVER (PARTITION BY country ORDER BY year ASC) AS NEXT_YR_POP\
-- FROM world_population;\
\
SELECT ROUND(CORR(BMI, AGE), 2) AS corr_BMI_AGE,\
       ROUND(CORR(PREGNANCIES, AGE), 2) AS corr_PREGN_AGE,\
       ROUND(CORR(BLOODPRESSURE, AGE), 2) AS corr_BP_AGE,\
       ROUND(CORR(SKINTHICKNESS, AGE), 2) AS corr_SKTHICK_AGE\
FROM DIABETES;\
\
-- Actually, there was one Time-like variable I could use: AGE\
-- Used to see the Change (in %, compared to the preceding Year) in Average Pregnancy by Age\
\
SELECT \
    AGE,\
    ROUND(AVG(PREGNANCIES), 2) AS AVG_PREGNANCIES,\
    CASE \
        WHEN LAG(AVG(PREGNANCIES)) OVER (ORDER BY AGE) IS NOT NULL AND \
             LAG(AVG(PREGNANCIES)) OVER (ORDER BY AGE) != 0\
        THEN ROUND(\
            (AVG(PREGNANCIES) - LAG(AVG(PREGNANCIES)) OVER (ORDER BY AGE)) \
            / LAG(AVG(PREGNANCIES)) OVER (ORDER BY AGE) * 100, 2)\
        ELSE NULL\
    END AS PERCENT_LAG_AVG_PREGNANCIES\
FROM DIABETES\
GROUP BY AGE\
ORDER BY AGE;\
\
-- A more Detailed Analysis of Changes in Average Pregnancies per Person for all Different Classifications of People\
\
SELECT \
    BPCLASS, \
    BMICLASS, \
    AGE, \
    ROUND(AVG(PREGNANCIES), 2) AS AVERAGE_PREGNANCIES,\
    CASE\
        WHEN LAG(AVG(PREGNANCIES)) OVER (PARTITION BY BPCLASS, BMICLASS ORDER BY AGE) IS NOT NULL AND \
             LAG(AVG(PREGNANCIES)) OVER (PARTITION BY BPCLASS, BMICLASS ORDER BY AGE) != 0\
        THEN ROUND(\
            ((AVG(PREGNANCIES) - LAG(AVG(PREGNANCIES)) OVER (PARTITION BY BPCLASS, BMICLASS ORDER BY AGE)) \
             / LAG(AVG(PREGNANCIES)) OVER (PARTITION BY BPCLASS, BMICLASS ORDER BY AGE)) * 100, 2)\
        ELSE NULL\
    END AS PERCENT_LAG_AVERAGE_PREGNANCIES\
FROM DIABETES\
GROUP BY BPCLASS, BMICLASS, AGE\
ORDER BY AGE;\
\
-- CTE Version of the LEAD/LAG Function^\
\
WITH Pregnancies_CTE AS (\
    SELECT \
        BPCLASS, \
        BMICLASS, \
        AGE, \
        ROUND(AVG(PREGNANCIES), 2) AS AVERAGE_PREGNANCIES,\
        LAG(ROUND(AVG(PREGNANCIES), 2)) OVER (\
            PARTITION BY BPCLASS, BMICLASS ORDER BY AGE\
        ) AS PREV_AVG_PREGNANCIES\
    FROM DIABETES\
    GROUP BY BPCLASS, BMICLASS, AGE\
)\
\
SELECT \
    BPCLASS,\
    BMICLASS,\
    AGE,\
    AVERAGE_PREGNANCIES,\
    CASE\
        WHEN PREV_AVG_PREGNANCIES IS NOT NULL AND PREV_AVG_PREGNANCIES != 0\
        THEN ROUND(((AVERAGE_PREGNANCIES - PREV_AVG_PREGNANCIES) / PREV_AVG_PREGNANCIES) * 100, 2)\
        ELSE NULL\
    END AS PERCENT_LAG_AVERAGE_PREGNANCIES\
FROM Pregnancies_CTE\
ORDER BY AGE;}